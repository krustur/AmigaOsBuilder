using System;
using System.IO;

namespace AmigaOsBuilder
{
    //public static byte ComputeAdditionChecksum(byte[] data)
        //{
        //    byte sum = 0;
        //    unchecked // Let overflow occur without exceptions
        //    {
        //        foreach (byte b in data)
        //        {
        //            sum += b;
        //        }
        //    }
        //    return sum;
        //}

    class LhaTest
    {
        public static void RunTest()
        {
            #region testdata
            //                /* E:\Amiga\KrustWB3\Output\Work\Workbench314Clean.lha (2018-10-02 00:00:24)
            //   StartOffset(h): 00000024, EndOffset(h): 000001DF, Length(h): 000001BC */

            //                byte[] rawData = {
            //    0x00, 0x00, 0x03, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
            //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66,
            //    0x00, 0x00, 0x03, 0xE9, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x55, 0xFF, 0xDC,
            //    0x48, 0xE7, 0x33, 0x32, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x7E, 0x14,
            //    0x2F, 0x49, 0x00, 0x20, 0x2C, 0x49, 0x43, 0xFA, 0x01, 0x06, 0x70, 0x24,
            //    0x4E, 0xAE, 0xFD, 0xD8, 0x26, 0x40, 0x20, 0x0B, 0x67, 0x00, 0x00, 0xDE,
            //    0x70, 0x07, 0x72, 0x00, 0x41, 0xED, 0xFF, 0xE8, 0x10, 0xC1, 0x51, 0xC8,
            //    0xFF, 0xFC, 0x41, 0xFA, 0x00, 0xF2, 0x22, 0x08, 0x43, 0xED, 0xFF, 0xE8,
            //    0x24, 0x09, 0x76, 0x00, 0x2C, 0x4B, 0x4E, 0xAE, 0xFC, 0xE2, 0x2F, 0x40,
            //    0x00, 0x1C, 0x4A, 0x80, 0x66, 0x10, 0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00,
            //    0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x00, 0x00, 0x98, 0x7E, 0x00,
            //    0x24, 0x6D, 0xFF, 0xE8, 0x4A, 0x12, 0x67, 0x28, 0x22, 0x4A, 0x4A, 0x19,
            //    0x66, 0xFC, 0x53, 0x89, 0x93, 0xCA, 0x72, 0x3A, 0x24, 0x09, 0xB2, 0x32,
            //    0x28, 0xFF, 0x67, 0x14, 0x7E, 0x14, 0x43, 0xFA, 0x00, 0xDC, 0x22, 0x09,
            //    0x41, 0xED, 0xFF, 0xE8, 0x24, 0x08, 0x4E, 0xAE, 0xFC, 0x46, 0x60, 0x5C,
            //    0x22, 0x2D, 0xFF, 0xEC, 0x67, 0x22, 0x2F, 0x41, 0x00, 0x24, 0x22, 0x0A,
            //    0x22, 0x6F, 0x00, 0x24, 0x24, 0x11, 0x4E, 0xAE, 0xFD, 0x24, 0x4A, 0x80,
            //    0x66, 0x0E, 0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE,
            //    0xFE, 0x26, 0x60, 0x34, 0x22, 0x0A, 0x74, 0x00, 0x4E, 0xAE, 0xFD, 0x24,
            //    0x2C, 0x00, 0x4A, 0x86, 0x6E, 0x12, 0x4A, 0x86, 0x66, 0x22, 0x4E, 0xAE,
            //    0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x14,
            //    0x2B, 0x46, 0xFF, 0xEC, 0x41, 0xFA, 0x00, 0xA2, 0x22, 0x08, 0x43, 0xED,
            //    0xFF, 0xE8, 0x24, 0x09, 0x4E, 0xAE, 0xFC, 0x46, 0x22, 0x2F, 0x00, 0x1C,
            //    0x4E, 0xAE, 0xFC, 0xA6, 0x22, 0x4B, 0x2C, 0x6F, 0x00, 0x20, 0x4E, 0xAE,
            //    0xFE, 0x62, 0x60, 0x10, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x20, 0x69,
            //    0x01, 0x14, 0x70, 0x7A, 0x21, 0x40, 0x00, 0x94, 0x20, 0x07, 0x4C, 0xDF,
            //    0x4C, 0xCC, 0x4E, 0x5D, 0x4E, 0x75, 0x64, 0x6F, 0x73, 0x2E, 0x6C, 0x69,
            //    0x62, 0x72, 0x61, 0x72, 0x79, 0x00, 0x44, 0x52, 0x49, 0x56, 0x45, 0x2F,
            //    0x41, 0x2C, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x2F, 0x4E, 0x00,
            //    0x24, 0x56, 0x45, 0x52, 0x3A, 0x20, 0x61, 0x64, 0x64, 0x62, 0x75, 0x66,
            //    0x66, 0x65, 0x72, 0x73, 0x20, 0x33, 0x37, 0x2E, 0x32, 0x20, 0x28, 0x32,
            //    0x31, 0x2E, 0x31, 0x2E, 0x31, 0x39, 0x39, 0x31, 0x29, 0x0A, 0x0D, 0x00,
            //    0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69,
            //    0x63, 0x65, 0x20, 0x6F, 0x72, 0x20, 0x76, 0x6F, 0x6C, 0x75, 0x6D, 0x65,
            //    0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x0A, 0x00,
            //    0x25, 0x73, 0x20, 0x68, 0x61, 0x73, 0x20, 0x25, 0x6C, 0x64, 0x20, 0x62,
            //    0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x0A, 0x00, 0x00, 0x00, 0x03, 0xF2
            //};



            /* E:\Amiga\KrustWB314\lha_drive_test.lha (2018-10-05 00:24:50)
               StartOffset(h): 00000026, EndOffset(h): 00000037, Length(h): 00000012 */

            byte[] rawData = {
                0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x63, 0x72, 0x75, 0x65, 0x6C, 0x20,
                0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21
            };



            //                /* E:\Amiga\KrustWB3\Output\Work\Workbench314Clean.lha (2018-10-02 00:00:24)
            //                 StartOffset(h): 00000002, EndOffset(h): 00000021, Length(h): 00000020 */

            //                byte[] rawDataHeader1 = {
            //                    0x2D, 0x6C, 0x68, 0x30, 0x2D, 0xBC, 0x01, 0x00, 0x00, 0xBC, 0x01, 0x00,
            //                    0x00, 0xE7, 0xB0, 0x3B, 0x01, 0x20, 0x00, 0x0C, 0x43, 0x5C, 0x41, 0x64,
            //                    0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73
            //                };

            //                /* E:\Amiga\KrustWB3\Output\Work\Workbench314Clean.lha (2018-10-02 00:00:24)
            //                 StartOffset(h): 00000002, EndOffset(h): 00000023, Length(h): 00000022 */

            //                byte[] rawDataHeader2 = {
            //                    0x2D, 0x6C, 0x68, 0x30, 0x2D, 0xBC, 0x01, 0x00, 0x00, 0xBC, 0x01, 0x00,
            //                    0x00, 0xE7, 0xB0, 0x3B, 0x01, 0x20, 0x00, 0x0C, 0x43, 0x5C, 0x41, 0x64,
            //                    0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4D, 0x71
            //                };

            //                /* E:\Amiga\KrustWB3\Output\Work\Workbench314Clean.lha (2018-10-02 00:00:24)
            //                 StartOffset(h): 00000002, EndOffset(h): 000001DF, Length(h): 000001DE */

            //                byte[] rawDataHeader3 = {
            //    0x2D, 0x6C, 0x68, 0x30, 0x2D, 0xBC, 0x01, 0x00, 0x00, 0xBC, 0x01, 0x00,
            //    0x00, 0xE7, 0xB0, 0x3B, 0x01, 0x20, 0x00, 0x0C, 0x43, 0x5C, 0x41, 0x64,
            //    0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4D, 0x71, 0x00, 0x00,
            //    0x03, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00,
            //    0x03, 0xE9, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x55, 0xFF, 0xDC, 0x48, 0xE7,
            //    0x33, 0x32, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x7E, 0x14, 0x2F, 0x49,
            //    0x00, 0x20, 0x2C, 0x49, 0x43, 0xFA, 0x01, 0x06, 0x70, 0x24, 0x4E, 0xAE,
            //    0xFD, 0xD8, 0x26, 0x40, 0x20, 0x0B, 0x67, 0x00, 0x00, 0xDE, 0x70, 0x07,
            //    0x72, 0x00, 0x41, 0xED, 0xFF, 0xE8, 0x10, 0xC1, 0x51, 0xC8, 0xFF, 0xFC,
            //    0x41, 0xFA, 0x00, 0xF2, 0x22, 0x08, 0x43, 0xED, 0xFF, 0xE8, 0x24, 0x09,
            //    0x76, 0x00, 0x2C, 0x4B, 0x4E, 0xAE, 0xFC, 0xE2, 0x2F, 0x40, 0x00, 0x1C,
            //    0x4A, 0x80, 0x66, 0x10, 0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03,
            //    0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x00, 0x00, 0x98, 0x7E, 0x00, 0x24, 0x6D,
            //    0xFF, 0xE8, 0x4A, 0x12, 0x67, 0x28, 0x22, 0x4A, 0x4A, 0x19, 0x66, 0xFC,
            //    0x53, 0x89, 0x93, 0xCA, 0x72, 0x3A, 0x24, 0x09, 0xB2, 0x32, 0x28, 0xFF,
            //    0x67, 0x14, 0x7E, 0x14, 0x43, 0xFA, 0x00, 0xDC, 0x22, 0x09, 0x41, 0xED,
            //    0xFF, 0xE8, 0x24, 0x08, 0x4E, 0xAE, 0xFC, 0x46, 0x60, 0x5C, 0x22, 0x2D,
            //    0xFF, 0xEC, 0x67, 0x22, 0x2F, 0x41, 0x00, 0x24, 0x22, 0x0A, 0x22, 0x6F,
            //    0x00, 0x24, 0x24, 0x11, 0x4E, 0xAE, 0xFD, 0x24, 0x4A, 0x80, 0x66, 0x0E,
            //    0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26,
            //    0x60, 0x34, 0x22, 0x0A, 0x74, 0x00, 0x4E, 0xAE, 0xFD, 0x24, 0x2C, 0x00,
            //    0x4A, 0x86, 0x6E, 0x12, 0x4A, 0x86, 0x66, 0x22, 0x4E, 0xAE, 0xFF, 0x7C,
            //    0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x14, 0x2B, 0x46,
            //    0xFF, 0xEC, 0x41, 0xFA, 0x00, 0xA2, 0x22, 0x08, 0x43, 0xED, 0xFF, 0xE8,
            //    0x24, 0x09, 0x4E, 0xAE, 0xFC, 0x46, 0x22, 0x2F, 0x00, 0x1C, 0x4E, 0xAE,
            //    0xFC, 0xA6, 0x22, 0x4B, 0x2C, 0x6F, 0x00, 0x20, 0x4E, 0xAE, 0xFE, 0x62,
            //    0x60, 0x10, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x20, 0x69, 0x01, 0x14,
            //    0x70, 0x7A, 0x21, 0x40, 0x00, 0x94, 0x20, 0x07, 0x4C, 0xDF, 0x4C, 0xCC,
            //    0x4E, 0x5D, 0x4E, 0x75, 0x64, 0x6F, 0x73, 0x2E, 0x6C, 0x69, 0x62, 0x72,
            //    0x61, 0x72, 0x79, 0x00, 0x44, 0x52, 0x49, 0x56, 0x45, 0x2F, 0x41, 0x2C,
            //    0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x2F, 0x4E, 0x00, 0x24, 0x56,
            //    0x45, 0x52, 0x3A, 0x20, 0x61, 0x64, 0x64, 0x62, 0x75, 0x66, 0x66, 0x65,
            //    0x72, 0x73, 0x20, 0x33, 0x37, 0x2E, 0x32, 0x20, 0x28, 0x32, 0x31, 0x2E,
            //    0x31, 0x2E, 0x31, 0x39, 0x39, 0x31, 0x29, 0x0A, 0x0D, 0x00, 0x49, 0x6E,
            //    0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
            //    0x20, 0x6F, 0x72, 0x20, 0x76, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x20, 0x6E,
            //    0x61, 0x6D, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x0A, 0x00, 0x25, 0x73,
            //    0x20, 0x68, 0x61, 0x73, 0x20, 0x25, 0x6C, 0x64, 0x20, 0x62, 0x75, 0x66,
            //    0x66, 0x65, 0x72, 0x73, 0x0A, 0x00, 0x00, 0x00, 0x03, 0xF2
            //};
            //                byte[] rawDataHeader = rawDataHeader2;


            var crc16Calcer = new Crc16();
            var crc16 = crc16Calcer.ComputeChecksum(rawData);
            //if (0x714D != crc16) throw  new NotImplementedException();

            //var crc8Calcer = new Crc8();
            //var crc8 = Crc8.ComputeChecksum(rawDataHeader);
            //if (0x0a != crc8) throw new NotImplementedException();



            //var crc8CalcerCRC8 = new CRC8Calc(CRC8_POLY.CRC8);
            //var crc8_CRC8 = crc8CalcerCRC8.Checksum(rawDataHeader);

            //var crc8CalcerCRC8_CCITT = new CRC8Calc(CRC8_POLY.CRC8_CCITT);
            //var crc8_CRC8_CCITT = crc8CalcerCRC8_CCITT.Checksum(rawDataHeader);

            //var crc8CalcerCRC8_DALLAS_MAXIM = new CRC8Calc(CRC8_POLY.CRC8_DALLAS_MAXIM);
            //var crc8_CRC8_DALLAS_MAXIM = crc8CalcerCRC8_DALLAS_MAXIM.Checksum(rawDataHeader);

            //var crc8CalcerCRC8_SAE_J1850 = new CRC8Calc(CRC8_POLY.CRC8_SAE_J1850);
            //var crc8_CRC8_SAE_J1850 = crc8CalcerCRC8_SAE_J1850.Checksum(rawDataHeader);

            //var crc8CalcerCRC_8_WCDMA = new CRC8Calc(CRC8_POLY.CRC_8_WCDMA);
            //var crc8_CRC_8_WCDMA = crc8CalcerCRC_8_WCDMA.Checksum(rawDataHeader);

            //var add = ComputeAdditionChecksum(rawDataHeader);
            #endregion

            try
            {
                using (var fs = new FileStream("E:\\Amiga\\KrustWB314\\lha_drive_test.lha", FileMode.Create, FileAccess.Write))
                {
                    var fileName = "helloworld.txt";
                    var fileContent = "Hello cruel world!";
                    var fileContentBytes = System.Text.Encoding.UTF8.GetBytes(fileContent);
                    var fileContentCrc = crc16Calcer.ComputeChecksum(fileContentBytes);
                    var fileContentCrc00FF = (byte)(fileContentCrc & 0x00FF);
                    var fileContentCrcFF00 = (byte)((fileContentCrc & 0xFF00) >> 8);
                    var headerLength = (byte)(24 + fileName.Length);
                    byte headerCrc = 0x00;
                    var fileContentLength = fileContent.Length;
                    var length000000FF = (byte)(fileContentLength & 0x000000FF);
                    var length0000FF00 = (byte)((fileContentLength & 0x0000FF00) >> 8);
                    var length00FF0000 = (byte)((fileContentLength & 0x00FF0000) >> 16);
                    var lengthFF000000 = (byte)((fileContentLength & 0xFF000000) >> 24);
                    var dateTime = 0x00000000;
                    var dateTime000000FF = (byte)(dateTime & 0x000000FF);
                    var dateTime0000FF00 = (byte)((dateTime & 0x0000FF00) >> 8);
                    var dateTime00FF0000 = (byte)((dateTime & 0x00FF0000) >> 16);
                    var dateTimeFF000000 = (byte)((dateTime & 0xFF000000) >> 24);
                    byte attribute = 0x00;
                    var headerBytes = new byte[headerLength];
                    headerBytes[0] = (byte)(headerLength - 2);
                    // crc will be written later
                    //headerBytes[1] = headerCrc;
                    headerBytes[2] = 0x2D; // -lh0-
                    headerBytes[3] = 0x6C;
                    headerBytes[4] = 0x68;
                    headerBytes[5] = 0x30;
                    headerBytes[6] = 0x2D;
                    headerBytes[7] = length000000FF; // little endian
                    headerBytes[8] = length0000FF00;
                    headerBytes[9] = length00FF0000;
                    headerBytes[10] = lengthFF000000;
                    headerBytes[11] = length000000FF;
                    headerBytes[12] = length0000FF00;
                    headerBytes[13] = length00FF0000;
                    headerBytes[14] = lengthFF000000;
                    headerBytes[15] = dateTime000000FF;
                    headerBytes[16] = dateTime0000FF00;
                    headerBytes[17] = dateTime00FF0000;
                    headerBytes[18] = dateTimeFF000000;
                    headerBytes[19] = attribute;
                    headerBytes[20] = 0x00; // Level identifier
                    headerBytes[21] = (byte)fileName.Length;
                    for (int i = 0; i < fileName.Length; i++)
                    {
                        headerBytes[22 + i] = (byte)fileName[i];
                    }
                    headerBytes[22 + fileName.Length] = fileContentCrc00FF;
                    headerBytes[23 + fileName.Length] = fileContentCrcFF00;

                    //headerCrc = ComputeAdditionChecksum(headerBytes);
                    headerCrc = 0;
                    unchecked
                    {
                        for (int i = 2; i < headerLength; i++)
                        {

                            headerCrc += headerBytes[i];
                        }
                    }
                    headerBytes[1] = headerCrc;

                    //    0x00, 0xE7, 0xB0, 0x3B, 0x01, 0x20, 0x00, 0x0C, 0x43, 0x5C, 0x41, 0x64,
                    //    0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4D, 0x71, 0x00, 0x00,
                    //    0x03, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00,
                    //    0x03, 0xE9, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x55, 0xFF, 0xDC, 0x48, 0xE7,
                    //    0x33, 0x32, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x7E, 0x14, 0x2F, 0x49,
                    //    0x00, 0x20, 0x2C, 0x49, 0x43, 0xFA, 0x01, 0x06, 0x70, 0x24, 0x4E, 0xAE,
                    //    0xFD, 0xD8, 0x26, 0x40, 0x20, 0x0B, 0x67, 0x00, 0x00, 0xDE, 0x70, 0x07,
                    //    0x72, 0x00, 0x41, 0xED, 0xFF, 0xE8, 0x10, 0xC1, 0x51, 0xC8, 0xFF, 0xFC,
                    //    0x41, 0xFA, 0x00, 0xF2, 0x22, 0x08, 0x43, 0xED, 0xFF, 0xE8, 0x24, 0x09,
                    //    0x76, 0x00, 0x2C, 0x4B, 0x4E, 0xAE, 0xFC, 0xE2, 0x2F, 0x40, 0x00, 0x1C,
                    //    0x4A, 0x80, 0x66, 0x10, 0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03,
                    //    0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x00, 0x00, 0x98, 0x7E, 0x00, 0x24, 0x6D,
                    //    0xFF, 0xE8, 0x4A, 0x12, 0x67, 0x28, 0x22, 0x4A, 0x4A, 0x19, 0x66, 0xFC,
                    //    0x53, 0x89, 0x93, 0xCA, 0x72, 0x3A, 0x24, 0x09, 0xB2, 0x32, 0x28, 0xFF,
                    //    0x67, 0x14, 0x7E, 0x14, 0x43, 0xFA, 0x00, 0xDC, 0x22, 0x09, 0x41, 0xED,
                    //    0xFF, 0xE8, 0x24, 0x08, 0x4E, 0xAE, 0xFC, 0x46, 0x60, 0x5C, 0x22, 0x2D,
                    //    0xFF, 0xEC, 0x67, 0x22, 0x2F, 0x41, 0x00, 0x24, 0x22, 0x0A, 0x22, 0x6F,
                    //    0x00, 0x24, 0x24, 0x11, 0x4E, 0xAE, 0xFD, 0x24, 0x4A, 0x80, 0x66, 0x0E,
                    //    0x4E, 0xAE, 0xFF, 0x7C, 0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26,
                    //    0x60, 0x34, 0x22, 0x0A, 0x74, 0x00, 0x4E, 0xAE, 0xFD, 0x24, 0x2C, 0x00,
                    //    0x4A, 0x86, 0x6E, 0x12, 0x4A, 0x86, 0x66, 0x22, 0x4E, 0xAE, 0xFF, 0x7C,
                    //    0x22, 0x00, 0x24, 0x03, 0x4E, 0xAE, 0xFE, 0x26, 0x60, 0x14, 0x2B, 0x46,
                    //    0xFF, 0xEC, 0x41, 0xFA, 0x00, 0xA2, 0x22, 0x08, 0x43, 0xED, 0xFF, 0xE8,
                    //    0x24, 0x09, 0x4E, 0xAE, 0xFC, 0x46, 0x22, 0x2F, 0x00, 0x1C, 0x4E, 0xAE,
                    //    0xFC, 0xA6, 0x22, 0x4B, 0x2C, 0x6F, 0x00, 0x20, 0x4E, 0xAE, 0xFE, 0x62,
                    //    0x60, 0x10, 0x30, 0x7C, 0x00, 0x04, 0x22, 0x50, 0x20, 0x69, 0x01, 0x14,
                    //    0x70, 0x7A, 0x21, 0x40, 0x00, 0x94, 0x20, 0x07, 0x4C, 0xDF, 0x4C, 0xCC,
                    //    0x4E, 0x5D, 0x4E, 0x75, 0x64, 0x6F, 0x73, 0x2E, 0x6C, 0x69, 0x62, 0x72,
                    //    0x61, 0x72, 0x79, 0x00, 0x44, 0x52, 0x49, 0x56, 0x45, 0x2F, 0x41, 0x2C,
                    //    0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x2F, 0x4E, 0x00, 0x24, 0x56,
                    //    0x45, 0x52, 0x3A, 0x20, 0x61, 0x64, 0x64, 0x62, 0x75, 0x66, 0x66, 0x65,
                    //    0x72, 0x73, 0x20, 0x33, 0x37, 0x2E, 0x32, 0x20, 0x28, 0x32, 0x31, 0x2E,
                    //    0x31, 0x2E, 0x31, 0x39, 0x39, 0x31, 0x29, 0x0A, 0x0D, 0x00, 0x49, 0x6E,
                    //    0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
                    //    0x20, 0x6F, 0x72, 0x20, 0x76, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x20, 0x6E,
                    //    0x61, 0x6D, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x0A, 0x00, 0x25, 0x73,
                    //    0x20, 0x68, 0x61, 0x73, 0x20, 0x25, 0x6C, 0x64, 0x20, 0x62, 0x75, 0x66,
                    //    0x66, 0x65, 0x72, 0x73, 0x0A, 0x00, 0x00, 0x00, 0x03, 0xF2
                    //
                    //};
                    //headerCrc = ComputeAdditionChecksum(headerBytes.);
                    fs.Write(headerBytes, 0, headerLength);
                    fs.Write(fileContentBytes, 0, fileContentLength);
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception caught in process: {0}", ex);
                return;
            }
            return;
        }
    }
}